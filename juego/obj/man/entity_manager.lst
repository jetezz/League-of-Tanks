ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 1.
Hexadecimal [16-Bits]



                              1 ;;
                              2 ;;entity manager
                              3 ;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 2.
Hexadecimal [16-Bits]



                              4 .include "entity_manager.h.s" 
                              1 ;;
                              2 ;;entity Manager
                              3 ;;
                              4 
                              5 
                              6 
                              7 .globl create_entities
                              8 .globl entityman_getEntityVector_IX
                              9 .globl entityman_num_entities
                             10 .globl _num_entities
                             11 .globl init_entities
                             12 
                             13 
                             14 ;; Entity definition macro
                             15 
                             16 
                             17 .macro Entity _name,_x,_y,_xl,_yl,_xll,_yll,_vx,_vy,_sh,_iast,_dir,_dead,_ancho,_alto
                             18 _name::
                             19 .db _x      ;;posicion x del tanque
                             20 .db _y	;;posicion y del tanque
                             21 .db _xl	;;posicion de la x anterior
                             22 .db _yl	;;posicion de la y anterior
                             23 .db _xll	;;posicion de la x 2 veces anterior
                             24 .db _yll	;;posicion de la x 2 veces anterior
                             25 .db _vx	;;velocidad en x
                             26 .db _vy	;;velocidad en y
                             27 .db _sh	;;shot 0 no 1 si
                             28 .db _iast;;type 0 jugador por teclas ,1 enemigo ia
                             29 .db _dir    ;;movimiento  
                             30 .db _sh     ;; si no dispara es 0 si dispara es 1
                             31 .db _dead;;canon 0 vivo 1 muere
                             32 .db 0x00, 0x00    ;;iax ia y
                             33 .db _iast  ;;Estado anterior de la ia 
                             34 .dw 0x0000	;; puntero de la patrulla que voy a realizar
                             35 .dw 0x0000 ;;puntero al estado que tengo que saltar
                             36 .db _ancho
                             37 .db _alto
                             38 .db 25  ;; contador cambio direcion del sprite
                             39 
                             40 
                             41 
                             42 
                             43 
                             44 
                             45 .endm 
                             46 
                             47 
                             48 .macro NextEntity
                             49 ld de, #siceof_e
                             50 	add ix, de
                             51 .endm
                             52 	
                             53 
                     0000    54 e_x  	= 0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 3.
Hexadecimal [16-Bits]



                     0001    55 e_y  	= 1
                     0002    56 e_xl  = 2
                     0003    57 e_yl  = 3
                     0004    58 e_xll = 4
                     0005    59 e_yll = 5
                     0006    60 e_vx	= 6
                     0007    61 e_vy	= 7
                     0008    62 e_sh 	= 8
                     0009    63 e_ia_st = 9
                     000A    64 e_dir = 10
                     000B    65 e_sh = 11
                     000C    66 e_dead=12
                     000D    67 e_ia_x= 13
                     000E    68 e_ia_y= 14
                     000F    69 e_ia_st_prev=15
                     0010    70 e_ia_puntero_patrol_h=16
                     0011    71 e_ia_puntero_patrol_l=17
                     0012    72 e_ia_puntero_st_h=18
                     0013    73 e_ia_puntero_st_l=19
                     0014    74 e_ancho 	= 20
                     0015    75 e_alto	= 21
                     0016    76 e_clock     = 22
                     0017    77 siceof_e 	= 23
                             78 
                             79 ;; Movimiento de la entidad
                     0003    80 e_dir_right = 3
                     0002    81 e_dir_top   = 2
                     0001    82 e_dir_left  = 1
                     0004    83 e_dir_bott  = 4
                             84 
                             85 ;; Dibujo que representa el movimiento de la entidad
                             86 
                             87  ;;      2
                             88  ;;     1e3
                             89  ;;      4
                             90 
                             91 
                             92 ;;Estados ia
                     0000    93 e_ia_st_noIA 	= 0
                     0001    94 e_ia_st_stand_by	= 1
                     0002    95 e_ia_st_move_to   = 2
                     0003    96 e_ia_st_patron	= 3
                             97 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 4.
Hexadecimal [16-Bits]



                              5 .include "man/state_manager.h.s"
                              1 ;;
                              2 ;;Draw map h
                              3 ;;
                              4 
                              5 
                              6 
                              7 .globl manage_game
                              8 .globl jugandostate_init
                              9 .globl set_Ingame
                             10 .globl set_Gameover
                             11 .globl set_Inicio
                             12 .globl _pausa
                             13 .globl _gamemode
                             14 
                             15 .globl get_gamemode
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 5.
Hexadecimal [16-Bits]



   0000 04                    6 _num_entities:: .db #4  ;; ESTABLECEMOS EL NUMERO DE ENTIDADES QUE HABRA EN NUESTRO JUEGO
                              7 
   0001 04                    8 _jugx: .db #4
   0002 10                    9 _jugy: .db #16
                             10 
   0003 04                   11 _jug2x: .db #4
   0004 90                   12 _jug2y: .db #144
                             13 
   0005 48                   14 _jug3x: .db #72
   0006 10                   15 _jug3y: .db #16
                             16 
                             17 
   0007 48                   18 _jug4x: .db #72
   0008 90                   19 _jug4y: .db #144
                             20 
                             21 
   0009 00                   22 _jugv: .db #00
   000A 00                   23 _jugshot: .db #00
   000B 03                   24 _jugdir:  .db #03
   000C 00                   25 _jugdead: .db #00
                             26 
   000D 00                   27 _jugia:  .db e_ia_st_noIA
   000E 00                   28 _jug2ia: .db e_ia_st_noIA
   000F 00                   29 _jug3ia: .db e_ia_st_noIA
   0010 00                   30 _jug4ia: .db e_ia_st_noIA
   0011                      31 set_gamemode_ia::
                             32 
                             33    ;;Cambiamos el color de lo que pintaremos
   0011 3A 00 00      [13]   34    ld a, (_gamemode)
   0014 3D            [ 4]   35    dec a ;;Gamemode es 1, es decir 1 jugador contra ia battle royale
   0015 CC 2E 00      [17]   36    call z, set_1player_ia
   0018 C8            [11]   37    ret z
                             38 
   0019 3D            [ 4]   39    dec a ;;Gamemode es 2, es decir 2 jugador contra ia battle royale
   001A CC 3A 00      [17]   40    call z, set_2player_ia
   001D C8            [11]   41    ret z
                             42 
   001E 3D            [ 4]   43    dec a ;;Gamemode es 3, es decir 3 jugador contra ia battle royale
   001F CC 48 00      [17]   44    call z, set_3player_ia
   0022 C8            [11]   45    ret z
                             46 
                             47 
   0023 3D            [ 4]   48    dec a ;;Gamemode es 4, es decir 4 jugador battle royale
   0024 CC 56 00      [17]   49    call z, set_4player_ia
   0027 C8            [11]   50    ret z
                             51 
   0028 3D            [ 4]   52    dec a ;;Gamemode es 5, es decir singleplayer
   0029 CC 62 00      [17]   53    call z, set_single_player_ia
   002C C8            [11]   54    ret z
                             55 
   002D C9            [10]   56 ret
   002E                      57 set_1player_ia:
   002E 3E 01         [ 7]   58  ld a, #e_ia_st_stand_by
   0030 32 0E 00      [13]   59  ld (_jug2ia), a
   0033 32 0F 00      [13]   60  ld (_jug3ia), a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 6.
Hexadecimal [16-Bits]



   0036 32 10 00      [13]   61  ld (_jug4ia), a
   0039 C9            [10]   62 ret
   003A                      63 set_2player_ia:
   003A 3E 00         [ 7]   64  ld a, #e_ia_st_noIA
   003C 32 0E 00      [13]   65  ld (_jug2ia), a
   003F 3E 01         [ 7]   66  ld a, #e_ia_st_stand_by
   0041 32 0F 00      [13]   67  ld (_jug3ia), a
   0044 32 10 00      [13]   68  ld (_jug4ia), a
   0047 C9            [10]   69 ret
   0048                      70 set_3player_ia:
   0048 3E 00         [ 7]   71  ld a, #e_ia_st_noIA
   004A 32 0E 00      [13]   72  ld (_jug2ia), a
   004D 32 0F 00      [13]   73  ld (_jug3ia), a
   0050 3E 01         [ 7]   74  ld a, #e_ia_st_stand_by
   0052 32 10 00      [13]   75  ld (_jug4ia), a
   0055 C9            [10]   76 ret
   0056                      77 set_4player_ia:
   0056 3E 00         [ 7]   78  ld a, #e_ia_st_noIA
   0058 32 0E 00      [13]   79  ld (_jug2ia), a
   005B 32 0F 00      [13]   80  ld (_jug3ia), a
   005E 32 10 00      [13]   81  ld (_jug4ia), a
   0061 C9            [10]   82 ret
   0062                      83 set_single_player_ia:
   0062 3E 01         [ 7]   84  ld a, #e_ia_st_stand_by
   0064 32 0E 00      [13]   85  ld (_jug2ia), a
   0067 32 0F 00      [13]   86  ld (_jug3ia), a
   006A 32 10 00      [13]   87  ld (_jug4ia), a
   006D C9            [10]   88 ret
                             89 
   006E                      90 init_entities::
   006E CD 11 00      [17]   91 	call set_gamemode_ia
   0071 CD AD 01      [17]   92 	call entityman_getEntityVector_IX
                             93 
                             94 
                             95 	;;Jugador 1
   0074 3A 01 00      [13]   96 	ld a, (_jugx)
   0077 DD 77 00      [19]   97 	ld e_x(ix), a
   007A DD 77 02      [19]   98 	ld e_xl(ix), a
   007D DD 77 04      [19]   99 	ld e_xll(ix), a
   0080 3A 02 00      [13]  100 	ld a, (_jugy)
   0083 DD 77 01      [19]  101 	ld e_y(ix), a
   0086 DD 77 03      [19]  102 	ld e_yl(ix), a
   0089 DD 77 05      [19]  103 	ld e_yll(ix), a
   008C 3A 09 00      [13]  104 	ld a, (_jugv)
   008F DD 77 06      [19]  105 	ld e_vx(ix), a
   0092 DD 77 07      [19]  106 	ld e_vy(ix), a
   0095 3A 0A 00      [13]  107 	ld a, (_jugshot)
   0098 DD 77 0B      [19]  108 	ld e_sh(ix), a
   009B 3A 0D 00      [13]  109 	ld a, (_jugia)
   009E DD 77 09      [19]  110 	ld e_ia_st(ix), a
   00A1 3A 0C 00      [13]  111 	ld a, (_jugdead)
   00A4 DD 77 0C      [19]  112 	ld e_dead(ix), a
                            113 
                            114 
   00A7                     115 	nextEntity
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 7.
Hexadecimal [16-Bits]



   00A7 11 17 00      [10]    1 ld de, #siceof_e
   00AA DD 19         [15]    2 	add ix, de
                            116 
                            117 	;;Jugador 2
   00AC 3A 03 00      [13]  118 	ld a, (_jug2x)
   00AF DD 77 00      [19]  119 	ld e_x(ix), a
   00B2 DD 77 02      [19]  120 	ld e_xl(ix), a
   00B5 DD 77 04      [19]  121 	ld e_xll(ix), a
   00B8 3A 04 00      [13]  122 	ld a, (_jug2y)
   00BB DD 77 01      [19]  123 	ld e_y(ix), a
   00BE DD 77 03      [19]  124 	ld e_yl(ix), a
   00C1 DD 77 05      [19]  125 	ld e_yll(ix), a
   00C4 3A 09 00      [13]  126 	ld a, (_jugv)
   00C7 DD 77 06      [19]  127 	ld e_vx(ix), a
   00CA DD 77 07      [19]  128 	ld e_vy(ix), a
   00CD 3A 0A 00      [13]  129 	ld a, (_jugshot)
   00D0 DD 77 0B      [19]  130 	ld e_sh(ix), a
   00D3 3A 0E 00      [13]  131 	ld a, (_jug2ia)
   00D6 DD 77 09      [19]  132 	ld e_ia_st(ix), a
   00D9 3A 0C 00      [13]  133 	ld a, (_jugdead)
   00DC DD 77 0C      [19]  134 	ld e_dead(ix), a
                            135 
   00DF                     136 	NextEntity
   00DF 11 17 00      [10]    1 ld de, #siceof_e
   00E2 DD 19         [15]    2 	add ix, de
                            137 
                            138 	;;Jugador 3
   00E4 3A 05 00      [13]  139 	ld a, (_jug3x)
   00E7 DD 77 00      [19]  140 	ld e_x(ix), a
   00EA DD 77 02      [19]  141 	ld e_xl(ix), a
   00ED DD 77 04      [19]  142 	ld e_xll(ix), a
   00F0 3A 06 00      [13]  143 	ld a, (_jug3y)
   00F3 DD 77 01      [19]  144 	ld e_y(ix), a
   00F6 DD 77 03      [19]  145 	ld e_yl(ix), a
   00F9 DD 77 05      [19]  146 	ld e_yll(ix), a
   00FC 3A 09 00      [13]  147 	ld a, (_jugv)
   00FF DD 77 06      [19]  148 	ld e_vx(ix), a
   0102 DD 77 07      [19]  149 	ld e_vy(ix), a
   0105 3A 0A 00      [13]  150 	ld a, (_jugshot)
   0108 DD 77 0B      [19]  151 	ld e_sh(ix), a
   010B 3A 0F 00      [13]  152 	ld a, (_jug3ia)
   010E DD 77 09      [19]  153 	ld e_ia_st(ix), a
   0111 3A 0C 00      [13]  154 	ld a, (_jugdead)
   0114 DD 77 0C      [19]  155 	ld e_dead(ix), a
                            156 
   0117                     157 	NextEntity
   0117 11 17 00      [10]    1 ld de, #siceof_e
   011A DD 19         [15]    2 	add ix, de
                            158 
                            159 	;;Jugador 4
   011C 3A 07 00      [13]  160 	ld a, (_jug4x)
   011F DD 77 00      [19]  161 	ld e_x(ix), a
   0122 DD 77 02      [19]  162 	ld e_xl(ix), a
   0125 DD 77 04      [19]  163 	ld e_xll(ix), a
   0128 3A 08 00      [13]  164 	ld a, (_jug4y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 8.
Hexadecimal [16-Bits]



   012B DD 77 01      [19]  165 	ld e_y(ix), a
   012E DD 77 03      [19]  166 	ld e_yl(ix), a
   0131 DD 77 05      [19]  167 	ld e_yll(ix), a
   0134 3A 09 00      [13]  168 	ld a, (_jugv)
   0137 DD 77 06      [19]  169 	ld e_vx(ix), a
   013A DD 77 07      [19]  170 	ld e_vy(ix), a
   013D 3A 0A 00      [13]  171 	ld a, (_jugshot)
   0140 DD 77 0B      [19]  172 	ld e_sh(ix), a
   0143 3A 10 00      [13]  173 	ld a, (_jug4ia)
   0146 DD 77 09      [19]  174 	ld e_ia_st(ix), a
   0149 3A 0C 00      [13]  175 	ld a, (_jugdead)
   014C DD 77 0C      [19]  176 	ld e_dead(ix), a
                            177 
                            178 
                            179 
                            180 
   014F C9            [10]  181 ret
                            182 
   0150                     183 create_entities::
                            184 
   0150                     185   Entity jugador   00,00  ,00,00  ,00,00  ,00,00 ,0 ,e_ia_st_noIA    , 3, 0,4,16		;; explicados en la macro
   0150                       1 jugador::
   0150 00                    2 .db 00      ;;posicion x del tanque
   0151 00                    3 .db 00	;;posicion y del tanque
   0152 00                    4 .db 00	;;posicion de la x anterior
   0153 00                    5 .db 00	;;posicion de la y anterior
   0154 00                    6 .db 00	;;posicion de la x 2 veces anterior
   0155 00                    7 .db 00	;;posicion de la x 2 veces anterior
   0156 00                    8 .db 00	;;velocidad en x
   0157 00                    9 .db 00	;;velocidad en y
   0158 00                   10 .db 0	;;shot 0 no 1 si
   0159 00                   11 .db e_ia_st_noIA;;type 0 jugador por teclas ,1 enemigo ia
   015A 03                   12 .db 3    ;;movimiento  
   015B 00                   13 .db 0     ;; si no dispara es 0 si dispara es 1
   015C 00                   14 .db 0;;canon 0 vivo 1 muere
   015D 00 00                15 .db 0x00, 0x00    ;;iax ia y
   015F 00                   16 .db e_ia_st_noIA  ;;Estado anterior de la ia 
   0160 00 00                17 .dw 0x0000	;; puntero de la patrulla que voy a realizar
   0162 00 00                18 .dw 0x0000 ;;puntero al estado que tengo que saltar
   0164 04                   19 .db 4
   0165 10                   20 .db 16
   0166 19                   21 .db 25  ;; contador cambio direcion del sprite
                             22 
                             23 
                             24 
                             25 
                             26 
                             27 
   0167                     186   Entity jugador2  00,00  ,00,00  ,00,00  ,00,00 ,0 ,e_ia_st_noIA	   , 3, 0,4,16	   
   0167                       1 jugador2::
   0167 00                    2 .db 00      ;;posicion x del tanque
   0168 00                    3 .db 00	;;posicion y del tanque
   0169 00                    4 .db 00	;;posicion de la x anterior
   016A 00                    5 .db 00	;;posicion de la y anterior
   016B 00                    6 .db 00	;;posicion de la x 2 veces anterior
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 9.
Hexadecimal [16-Bits]



   016C 00                    7 .db 00	;;posicion de la x 2 veces anterior
   016D 00                    8 .db 00	;;velocidad en x
   016E 00                    9 .db 00	;;velocidad en y
   016F 00                   10 .db 0	;;shot 0 no 1 si
   0170 00                   11 .db e_ia_st_noIA;;type 0 jugador por teclas ,1 enemigo ia
   0171 03                   12 .db 3    ;;movimiento  
   0172 00                   13 .db 0     ;; si no dispara es 0 si dispara es 1
   0173 00                   14 .db 0;;canon 0 vivo 1 muere
   0174 00 00                15 .db 0x00, 0x00    ;;iax ia y
   0176 00                   16 .db e_ia_st_noIA  ;;Estado anterior de la ia 
   0177 00 00                17 .dw 0x0000	;; puntero de la patrulla que voy a realizar
   0179 00 00                18 .dw 0x0000 ;;puntero al estado que tengo que saltar
   017B 04                   19 .db 4
   017C 10                   20 .db 16
   017D 19                   21 .db 25  ;; contador cambio direcion del sprite
                             22 
                             23 
                             24 
                             25 
                             26 
                             27 
   017E                     187   Entity enemigo   00,00  ,00,00  ,00,00  ,00,00 ,0 ,e_ia_st_stand_by, 3, 0,4,16	               
   017E                       1 enemigo::
   017E 00                    2 .db 00      ;;posicion x del tanque
   017F 00                    3 .db 00	;;posicion y del tanque
   0180 00                    4 .db 00	;;posicion de la x anterior
   0181 00                    5 .db 00	;;posicion de la y anterior
   0182 00                    6 .db 00	;;posicion de la x 2 veces anterior
   0183 00                    7 .db 00	;;posicion de la x 2 veces anterior
   0184 00                    8 .db 00	;;velocidad en x
   0185 00                    9 .db 00	;;velocidad en y
   0186 00                   10 .db 0	;;shot 0 no 1 si
   0187 01                   11 .db e_ia_st_stand_by;;type 0 jugador por teclas ,1 enemigo ia
   0188 03                   12 .db 3    ;;movimiento  
   0189 00                   13 .db 0     ;; si no dispara es 0 si dispara es 1
   018A 00                   14 .db 0;;canon 0 vivo 1 muere
   018B 00 00                15 .db 0x00, 0x00    ;;iax ia y
   018D 01                   16 .db e_ia_st_stand_by  ;;Estado anterior de la ia 
   018E 00 00                17 .dw 0x0000	;; puntero de la patrulla que voy a realizar
   0190 00 00                18 .dw 0x0000 ;;puntero al estado que tengo que saltar
   0192 04                   19 .db 4
   0193 10                   20 .db 16
   0194 19                   21 .db 25  ;; contador cambio direcion del sprite
                             22 
                             23 
                             24 
                             25 
                             26 
                             27 
   0195                     188   Entity enemigo2  00,00  ,00,00  ,00,00  ,00,00 ,0 ,e_ia_st_stand_by, 3, 0,4,16	
   0195                       1 enemigo2::
   0195 00                    2 .db 00      ;;posicion x del tanque
   0196 00                    3 .db 00	;;posicion y del tanque
   0197 00                    4 .db 00	;;posicion de la x anterior
   0198 00                    5 .db 00	;;posicion de la y anterior
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 10.
Hexadecimal [16-Bits]



   0199 00                    6 .db 00	;;posicion de la x 2 veces anterior
   019A 00                    7 .db 00	;;posicion de la x 2 veces anterior
   019B 00                    8 .db 00	;;velocidad en x
   019C 00                    9 .db 00	;;velocidad en y
   019D 00                   10 .db 0	;;shot 0 no 1 si
   019E 01                   11 .db e_ia_st_stand_by;;type 0 jugador por teclas ,1 enemigo ia
   019F 03                   12 .db 3    ;;movimiento  
   01A0 00                   13 .db 0     ;; si no dispara es 0 si dispara es 1
   01A1 00                   14 .db 0;;canon 0 vivo 1 muere
   01A2 00 00                15 .db 0x00, 0x00    ;;iax ia y
   01A4 01                   16 .db e_ia_st_stand_by  ;;Estado anterior de la ia 
   01A5 00 00                17 .dw 0x0000	;; puntero de la patrulla que voy a realizar
   01A7 00 00                18 .dw 0x0000 ;;puntero al estado que tengo que saltar
   01A9 04                   19 .db 4
   01AA 10                   20 .db 16
   01AB 19                   21 .db 25  ;; contador cambio direcion del sprite
                             22 
                             23 
                             24 
                             25 
                             26 
                             27 
                            189 
   01AC C9            [10]  190   ret               
                            191 
                            192 
                            193 
   01AD                     194 entityman_getEntityVector_IX:: ;;mandar el puntero al primer byte del array de tanques en xy
   01AD DD 21 50 01   [14]  195  ld ix, #jugador
   01B1 C9            [10]  196 	ret
                            197 	
                            198 
   01B2                     199 entityman_num_entities::      ;; mandar el numero de tanques que hay en a(no necesario siempre es 4)
   01B2 3A 00 00      [13]  200  ld a, (_num_entities)
   01B5 C9            [10]  201  ret
                            202 
                            203 
